"""
Django settings for NewsPaper project.

Generated by 'django-admin startproject' using Django 4.2.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-u4#2gev(9fktjg4pdjw4@jejf3j_1tp=h2n7$7jef3024kugit'



ALLOWED_HOSTS = ['127.0.0.1']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_filters',
    'django_apscheduler',
    'news.apps.RestConfig',
    'django.contrib.sites',
    #########
    # 3rd party apps
    #########
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    # ... здесь нужно указать провайдеры, которые планируете использовать
    'allauth.socialaccount.providers.google',

]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'allauth.account.middleware.AccountMiddleware',
]

ROOT_URLCONF = 'NewsPaper.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')], 
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'NewsPaper.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#         'OPTIONS': {
#             'timeout': 20,  # in seconds
#             # see also
#             # https://docs.python.org/3.7/library/sqlite3.html#sqlite3.connect
#         }
#     }
# }

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'postgres',
        'USER': 'postgres',
        'PASSWORD': '147896325',
        'HOST': 'localhost',
        'PORT': '5432',
    },
}



AUTHENTICATION_BACKENDS = [
   # Needed to login by username in Django admin, regardless of `allauth`
   'django.contrib.auth.backends.ModelBackend',
  
   # `allauth` specific authentication methods, such as login by e-mail
   'allauth.account.auth_backends.AuthenticationBackend',
]

LOGIN_URL = '/accounts/login/'
LOGIN_REDIRECT_URL = '/news'

SERVER_EMAIL = 'ostapdev@epoha.ru'
DEFAULT_FROM_EMAIL = 'ostapdev@epoha.ru' # здесь указываем уже свою ПОЛНУЮ почту с которой будут отправляться письма 

SITE_ID = 1

ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_AUTHENTICATION_METHOD = 'email'
ACCOUNT_EMAIL_VERIFICATION = 'mandatory'

ACCOUNT_FORMS = {'signup': 'news.forms.BasicSignupForm'}

EMAIL_HOST = 'mail.nic.ru' # адрес сервера Яндекс-почты для всех один и тот же
EMAIL_PORT = 2525 # порт smtp сервера тоже одинаковый
EMAIL_HOST_USER = 'ostapdev@epoha.ru' # ваше имя пользователя, например если ваша почта user@yandex.ru, то сюда надо писать user, иными словами, это всё то что идёт до собаки
EMAIL_HOST_PASSWORD = '' # пароль от почты
EMAIL_USE_SSL = False # Яндекс использует ssl, подробнее о том, что это, почитайте на Википедии, но включать его здесь обязательно

MANAGERS = [
    ('CREATOR', 'ostap@epoha.ru'),
]

# формат даты, которую будет воспринимать наш задачник(вспоминаем урок по фильтрам) 
APSCHEDULER_DATETIME_FORMAT = "N j, Y, f:s a"
 
# если задача не выполняется за 25 секунд, то она автоматически снимается, можете поставить время побольше, но как правило, это сильно бьёт по производительности сервера
APSCHEDULER_RUN_NOW_TIMEOUT = 25  # Seconds

CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.filebased.FileBasedCache',
        'LOCATION': os.path.join(BASE_DIR, 'cache_files'), # Указываем, куда будем сохранять кэшируемые файлы! Не забываем создать папку cache_files внутри папки с manage.py!
        'TIMEOUT': 30,
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'fileSecurityInfoFormatter': {
            'format': '{asctime} {levelname} {module} {message}',
        'style': '{',  
        },
        'fileErrorAndCriticalFormatter': {
            'format': '{asctime} {levelname} {message} {pathname} {exc_info}',
        'style': '{',  
        },
        'infoFormatter': {
            'format': '{asctime} {levelname} {module} {message}',
        'style': '{',  
        },
        'debugFormatter': {
            'format': '{asctime} {levelname} {message}',
        'style': '{',  
        },
        'warningFormatter': {
            'format': '{pathname} {asctime} {levelname} {message}',
        'style': '{',  
        },
        'errorAndCriticalErrorFormatter': {
            'format': '{pathname} {asctime} {levelname} {message} {exc_info}',
        'style': '{',  
        },
        'mailErrorAndCriticalErrorFormatter': {
            'format': '{pathname} {asctime} {levelname} {message}',
        'style': '{',  
        },
    },
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse',
        },
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    'handlers': {
        'fileLogSecurity': {
            'level': 'INFO',
            'filters': ['require_debug_true'],
            'class': 'logging.FileHandler',
            'formatter': 'fileSecurityInfoFormatter',
            'filename': 'security.log'
        },
        'fileLogInfo': {
            'level': 'INFO',
            'filters': ['require_debug_false'],
            'class': 'logging.FileHandler',
            'formatter': 'infoFormatter',
            'filename': 'general.log'
        },
        'fileLogError': {
            'level': 'ERROR',
            'filters': ['require_debug_true'],
            'class': 'logging.FileHandler',
            'formatter': 'fileErrorAndCriticalFormatter',
            'filename': 'errors.log'
        },
        'fileLogCriticalError': {
            'level': 'CRITICAL',
            'filters': ['require_debug_true'],
            'class': 'logging.FileHandler',
            'formatter': 'fileErrorAndCriticalFormatter',
            'filename': 'errors.log'
        },
        'consoleDebug': {
            'level': 'DEBUG',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
            'formatter': 'debugFormatter'
        },
        'consoleWarnings': {
            'level': 'WARNING',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
            'formatter': 'warningFormatter'
        },
        'consoleErrors': {
            'level': 'ERROR',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
            'formatter': 'errorAndCriticalErrorFormatter'
        },
        'consoleCriticalErrors': {
            'level': 'CRITICAL',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
            'formatter': 'errorAndCriticalErrorFormatter'
        },
        'mail_admins': {
            'level': 'ERROR',
            'filters': ['require_debug_false'],
            'class': 'django.utils.log.AdminEmailHandler',
            'formatter': 'mailErrorAndCriticalErrorFormatter'
        }
    },
    'loggers': {
        'django': {
            'handlers': ['fileLogInfo', 'consoleDebug', 'consoleWarnings', 'consoleErrors', 'consoleCriticalErrors'],
            'propagate': True,
        },
        'django.request': {
            'handlers': ['mail_admins', 'fileLogError', 'fileLogCriticalError'],
            'level': 'ERROR',
            'propagate': False,
        },
        'django.server': {
            'handlers': ['mail_admins', 'fileLogError', 'fileLogCriticalError'],
            'level': 'ERROR',
            'propagate': False,
        },
        'django.template': {
            'handlers': ['fileLogError', 'fileLogCriticalError'],
            'level': 'ERROR',
            'propagate': False,
        },
        'django.db_backends': {
            'handlers': ['fileLogError', 'fileLogCriticalError'],
            'level': 'ERROR',
            'propagate': False,
        },
        'django.security': {
            'handlers': ['fileLogSecurity'],
            'level': 'INFO',
            'propagate': False,
        }
        
    }
}



# AUTH_USER_MODEL = 'rest.UserAbs'


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
